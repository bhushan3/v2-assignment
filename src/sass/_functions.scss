@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:selector';
@use 'sass:string';
@use 'variables' as *;

/// Utilities
/// ----------------------------------------------------------------------------

/// Convert any CSS <length> or <percentage> value to any another.
///
/// @param {Number} $length
///  A css <length> or <percentage> value
///
/// @param {String} $to-unit
///  String matching a css unit keyword, e.g. 'em', '%', etc.
///
/// @param {Number} $from-context
///  When converting from relative units, the absolute length (in px) to
///  which $length refers (e.g. for $length with em units, would normally
///  be the font-size of the current element).
///  16px is typically default font-size for all browsers.
///
/// @param {Number} $to-context
///  For converting to relative units, the absolute length in px to which the
///  output value will refer. Defaults to the same as $from-context, since it
///  is rarely needed.
///
/// @return {Number}
///  Converted CSS length
///
@function convert-length($length, $to-unit, $from-context: 16px, $to-context: $from-context) {
	/* stylelint-disable length-zero-no-unit */

	$from-unit: math.unit($length);

	// Optimize for cases where `from` and `to` units are accidentally the same.
	@if $from-unit == $to-unit {
		@return $length;
	}

	// Context values must be in px so we can determine a conversion ratio for
	// relative units.
	@if math.unit($from-context) != 'px' {
		@warn 'Paremeter "$from-context #{$from-context}" must resolve to a value in pixel units.';
	}

	@if math.unit($to-context) != 'px' {
		@warn 'Parameter "$to-context #{$to-context}" must resolve to a value in pixel units.';
	}

	// Convert input length to pixels
	$px-length: $length;

	@if $from-unit != 'px' {
		// Convert relative units using the from-context parameter.
		@if $from-unit == 'em' {
			$px-length: math.div($length * $from-context, 1em);
		} @else if $from-unit == 'rem' {
			$px-length: math.div($length * $from-context, 1rem);
		} @else if $from-unit == '%' {
			$px-length: math.div($length * $from-context, 100%);
		} @else if $from-unit == 'ex' {
			$px-length: math.div($length * $from-context, 2ex);
		} @else if $from-unit == 'in' or $from-unit == 'mm' or $from-unit == 'cm' or $from-unit == 'pt' or $from-unit == 'pc' {
			// Convert absolute units using SASS conversion table.
			$px-length: 0px + $length;
		} @else if $from-unit == 'ch' or $from-unit == 'vw' or $from-unit == 'vh' or $from-unit == 'vmin' {
			// Certain units can't be converted.
			@warn '#{$from-unit} units can\'t be reliably converted. Returning original value.';
			@return $length;
		} @else {
			@warn '#{$from-unit} is an unknown length unit. Returning original value.';
			@return $length;
		}
	}

	// Convert length in pixels to the output unit
	$output-length: $px-length;

	@if $to-unit != 'px' {
		@if $to-unit == 'em' {
			$output-length: math.div($px-length * 1em, $to-context);
		} @else if $to-unit == 'rem' {
			$output-length: math.div($px-length * 1rem, $to-context);
		} @else if $to-unit == '%' {
			$output-length: math.div($px-length * 100%, $to-context);
		} @else if $to-unit == 'ex' {
			$output-length: math.div($px-length * 2ex, $to-context);
		} @else if $to-unit == 'in' {
			$output-length: 0in + $px-length;
		} @else if $to-unit == 'mm' {
			$output-length: 0mm + $px-length;
		} @else if $to-unit == 'cm' {
			$output-length: 0cm + $px-length;
		} @else if $to-unit == 'pt' {
			$output-length: 0pt + $px-length;
		} @else if $to-unit == 'pc' {
			$output-length: 0pc + $px-length;
		} @else if $to-unit == 'ch' or $to-unit == 'vw' or $to-unit == 'vh' or $to-unit == 'vmin' {
			// Non-convertible units
			@warn '#{$to-unit} units can\'t be reliably converted. Returning original value.';
			@return $length;
		} @else {
			@warn '#{$to-unit} is an unknown length unit. Returning original value.';
			@return $length;
		}
	}

	@return $output-length;
}

/// Returns the value in rem for a given value.
///
/// @param {Number} $value
///  The value to be converted.
///
/// @return {Number}
///  The converted value in rem.
///
@function rem($value, $from-context: 16px, $to-context: $from-context) {
	@return convert-length($value, 'rem', $from-context, $to-context);
}

/// Returns the value in px for a given value.
///
/// @param {Number} $value
///  The value to be converted.
///
/// @return {Number}
///  The converted value in px.
///
@function px($value, $from-context: 16px, $to-context: $from-context) {
	@return convert-length($value, 'px', $from-context, $to-context);
}

/// Returns the value in em for a given value.
///
/// @param {Number} $value
///  The value to be converted.
///
/// @return {Number}
///  The converted value in em.
///
@function em($value, $from-context: 16px, $to-context: $from-context) {
	@return convert-length($value, 'em', $from-context, $to-context);
}

/// Add $unit to $unitless-number.
///
/// @param {Number} $unitless-number
///   Value to add unit to
///
/// @param {String} $unit
///   String representation of the unit
///
/// @return {Number}
///   $unitless-number expressed in $unit
///
@function add-unit($unitless-number, $unit) {
	$units: (
		'px': 1px,
		'cm': 1cm,
		'mm': 1mm,
		'%': 1%,
		'ch': 1ch,
		'pc': 1pc,
		'in': 1in,
		'em': 1em,
		'rem': 1rem,
		'pt': 1pt,
		'ex': 1ex,
		'vw': 1vw,
		'vh': 1vh,
		'vmin': 1vmin,
		'vmax': 1vmax
	);

	@if index(map-keys($units), $unit) {
		@return $unitless-number * map.get($units, $unit);
	} @else {
		@warn 'Invalid unit "#{$unit}".';
	}

	@return $unitless-number;
}

/// Remove the unit of a CSS <length>.
///
/// @param {Number} $length
///   Number to remove unit from
///
/// @return {Number}
///   Unitless number
///
@function strip-unit($number) {
	@if type-of($number) == 'number' {
		@if math.is-unitless($number) == false {
			@return math.div($number, ($number * 0 + 1));
		}
	} @else {
		@warn '"$number: #{$number}" is #{type-of($number)} value and must resolve to a number value.';
	}

	@return $number;
}

/// Convert string to number if string is valid CSS <length>.
/// Casts a string into a number
///
/// @param {String|Number} $string
///   Value to be parsed
///
/// @return {Number}
///
@function to-number($string) {

	// $string: if(type-of($string) == string, unquote($string), $string);

	@if type-of($string) == number {
		@return $string;
	} @else if type-of($string) == string {
		$result: 0;
		$digits: 0;
		$minus: string.slice($string, 1, 1) == '-';
		$numbers: (
			'0': 0,
			'1': 1,
			'2': 2,
			'3': 3,
			'4': 4,
			'5': 5,
			'6': 6,
			'7': 7,
			'8': 8,
			'9': 9
		);

		@for $i from if($minus, 2, 1) through string.length($string) {
			$character: string.slice($string, $i, $i);

			@if not (index(map-keys($numbers), $character) or $character == '.') {
				@if $minus {
					@return add-unit(-$result, string.slice($string, $i));
				} @else {
					@return add-unit($result, string.slice($string, $i));
				}
			}

			@if $character == '.' {
				$digits: 1;
			} @else if $digits == 0 {
				$result: $result * 10 + map.get($numbers, $character);
			} @else {
				$digits: $digits * 10;
				$result: $result + math.div(map.get($numbers, $character), $digits);
			}
		}

		@return if($minus, -$result, $result);
	} @else {
		@warn 'Value for "$string: #{$string}" should be a number or a string.';
		@return $string;
	}
}

/// Replace all occurrences of the search string with the replacement string
///
/// @param {String} $subject
///  The string being searched and replaced on, otherwise known as the haystack.
///
/// @param {String} $search
///  The value being searched for, otherwise known as the needle.
///
/// @param {String} $replace ('')
///  The replacement value that replaces found search values.
///
/// @return {String}
///  A string with the replaced values.
///
@function str-replace($subject, $search, $replace: '') {
	$index: string.index($subject, $search);

	@if $index {
		@return string.slice($subject, 1, $index - 1) + $replace + str-replace(string.slice($subject, $index + string.length($search)), $search, $replace);
	}

	@return $subject;
}

/// Helper function to easily use an SVG inline in CSS without encoding it to
/// base64, saving bytes. It also helps with browser support.
///
/// A small function allowing skipping base64 encoding and simply pasting the
/// SVG markup right in the CSS.
///
/// @param {String} $svg
///  SVG image to encode
///
/// @return {String}
///  Encoded SVG data uri
///
@function svg-uri($svg) {
	$encoded: '';
	$slice: 2000;
	$index: 0;
	$loops: math.ceil(math.div(string.length($svg), $slice));

	@for $i from 1 through $loops {
		$chunk: string.slice($svg, $index, $index + $slice - 1);
		$chunk: str-replace($chunk, '\'', '"');
		$chunk: str-replace($chunk, '<', '%3C');
		$chunk: str-replace($chunk, '>', '%3E');
		$chunk: str-replace($chunk, '&', '%26');
		$chunk: str-replace($chunk, '#', '%23');
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}

	@return url('data:image/svg+xml;charset=utf8,#{$encoded}');
}

/// Returns the value of the specified key from the map.
///
/// @param {Map} $map
///  The map in which to retrieve for the specified key.
///
/// @param {String} $key
///  The key name to be be retrieve form the map.
///
/// @param {String} $name
///  The name for the map.
///
/// @param {Map} $fllback-map
///  The fllback map, if specified key does not exist in first map.
///
/// @return
///  The retrieved value.
///
@function map-fetch($map, $key, $name, $fllback-map: ()) {
	@if map.has-key($map, $key) {
		@return map.get($map, $key);
	} @else if map.has-key($fllback-map, $key) {
		@return map.get($fllback-map, $key);
	}

	@error '`#{$key}` not found in `#{$name}`';
}

/// Functions to fecth values from their respective maps
/// ----------------------------------------------------------------------------
@function color($color) {
	@return map-fetch($color-data, $color, '$color-data');
}

@function color-dark($color) {
	@return map-fetch($color-dark-data, $color, '$color-dark-data', $fllback-map: $color-data);
}

// Layout
// -----------------------------------------------------------------------------

// The length unit in which to output media query values.
// Supported values: px, em, rem.
$media-query-unit: em !default;

// Get a breakpoint's width
//
// @param {String} $name
//  Name of the breakpoint. One of $breakpoints-data
//
// @example scss
//  $tablet-width: breakpoint(tablet);
//  @media (min-width: breakpoint(desktop)) {}
//
// @requires {Variable} $breakpoint-data
//
// @returns {Number} Value in specified unit.
//
@function breakpoint($name, $unit: $media-query-unit) {
	@if map.has-key($breakpoint-data, $name) {
		$width: map.get($breakpoint-data, $name);

		@return convert-length($width, $unit);
	}

	@error '\a Breakpoint `#{$name}` not found.\a\a Available options: #{available-names($breakpoint-data)}\a\a';
}
